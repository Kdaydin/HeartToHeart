plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.khomeapps.hearttoheart"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    def envStorePass = System.getenv("STORE_PASS")
    def envKeyAlias = System.getenv("KEY_ALIAS")
    def envKeyPass = System.getenv("KEY_PASS")
    def keystoreProperties = new Properties()
    if (rootProject.file('local.properties').exists()) {
        rootProject.file('local.properties').withInputStream {
            stream -> keystoreProperties.load(stream)
        }
    }

    def getStorePass = { ->
        def storePass = keystoreProperties.containsKey("storepass") ? keystoreProperties.getProperty("storepass") : envStorePass
        return storePass
    }

    def getKeyAlias = { ->
        def keyAlias = keystoreProperties.containsKey("keyalias") ? keystoreProperties.getProperty("keyalias") : envKeyAlias
        return keyAlias
    }

    def getKeyPass = { ->
        def keyPass = keystoreProperties.containsKey("keypass") ? keystoreProperties.getProperty("keypass") : envKeyPass
        return keyPass
    }

    signingConfigs {
        release {
            storeFile file("HTHKeyStore.jks")
            storePassword getStorePass()
            keyAlias getKeyAlias()
            keyPassword getKeyPass()
        }
    }

    buildTypes {
        release {
            lintOptions {
                disable 'MissingTranslation'
                checkReleaseBuilds false
                abortOnError false
            }
            debuggable false
            signingConfig signingConfigs.release
            buildConfigField 'boolean', 'DEVELOPMENT', 'false'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            buildConfigField 'boolean', 'DEVELOPMENT', 'true'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "type"
    productFlavors {
        DEV {
            applicationIdSuffix ".dev"
            manifestPlaceholders = [buildTypePrefix: "DEV_"]
            dimension "type"
            buildConfigField("String", "VARIANT", "\"dev\"")
        }

        UAT {
            applicationIdSuffix ".uat"
            manifestPlaceholders = [buildTypePrefix: "UAT_"]
            dimension "type"
            buildConfigField("String", "VARIANT", "\"uat\"")
        }

        PROD {
            dimension "type"
            manifestPlaceholders = [buildTypePrefix: ""]
            buildConfigField("String", "VARIANT", "\"prod\"")
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
    }
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation platform('com.google.firebase:firebase-bom:26.2.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-firestore-ktx'

    implementation 'com.firebaseui:firebase-ui-auth:6.4.0'

}